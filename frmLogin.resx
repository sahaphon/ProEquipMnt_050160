<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAgAAAAMAAAAFAAAAChEAEQ8NAA0TAAAAFgAA
        ABkAAAAbAAAAGgAAABgAAAAUAAAADwAAAAwAAAAIAAAABAAAAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAUAAAAIEhISDg0NDRQAAAAbAAAAJAYA
        BisAAAAvAAAAMgAAADQAAAAzAAAAMAAAACsAAAAmAAAAHgAAABYAAAAQAAAACwAAAAYAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAFAAAACg8PDxEJCQkbBwcHJQUF
        BTEEBAQ9BAQERwAAA00AAABSAAAAUwAAAFIAAANOAAAESAAABD8AAAUzAAAAKAAAAB0AAAAUAAAADQAA
        AAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAgAAAAQCgoKGg0G
        DSgJCQk4BwcHSAYIBlsFBQVrAgIEdAICAncCAgJ3AgICdgQCBHIFBQVqBgYIXAcHB0wJBAQ8BgYALQAA
        AB4AAAAUAAAADAAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAACgwM
        DBUICAgiCgoKMwcHB0oICAhlCgoKglxcXLKOjo7QnJyb2bS0tOOrq6veoKCg042NjcJOTk6XBQUFaQYG
        A1AEBAQ6AAAAKAAAABoAAAAQAAAABwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAYAAAAMCwsLFw0NDScEBAQ7ODg4ZbCwsMTX19fz3d3d+93d3vzd3d393d3d/d3d3f3d3d373t7e+uDg
        4PjV1dXpo6OjphwgIEgGBgYtAAAAHAAAABEAAAAJAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABgAAAAsMDAwWGxsbJsDAwJXl5eXr5ubm9OHh4fjd3d393Nzc/9zc3P/c3Nz/3Nzc/9zc
        3P/d3t794ODg+ePj4/bo6Ojy4eHh3q6urmsJCQkbAAAAEAAAAAgAAAADAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAADAAAACHV1dRji4uKx6+vr7urq6u/p6enx5+fn8+Xl5fXj4+P25eXl9eXl
        5fXl5eX15ubm9Obm5vTn5+fz5+fn8unp6fHq6urv6+vr7t3d3YcAAAAKAAAABAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGioqIL7e3tve7u7uzu7u7s7e3t7e3t7e3t7e3t7u7u7O/v
        7+vv7+/r7+/v6+/v7+vv7+/r7+/v6+7u7uzu7u7t7e3t7e3t7e3u7u7s7u7u7Ovr64wAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO/v76Dw8PDr8PDw6/Dw8Ovw8PDr8PDw6/Dw
        8Ovw8PDr8PDw6/Dw8Ovw8PDr8PDw6/Dw8Ovw8PDr8PDw6/Dw8OvNzc3usLCw8fDw8Ovw8PDr8PDw6/Dw
        8GYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADv7+9h8PDw6/Dw8Ovw8PDr8PDw6/Dw
        8Ovw8PDr8PDw6/Dw8Ovw8PDr8PDw6/Dw8Ovw8PDr8PDw6/Dw8Ovw8PDrzs7O7kdHSP1paWv5kpKT9PDw
        8Ovw8PDr8PDw6Ozs7CkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6OjoC/Dw8NLx8fHr8fHx6/Hx
        8evx8fHr8fHx6/Hx8evx8fHr8fHx6/Hx8evx8fHr8fHx6/Hx8evx8fHr8fHx69DQ0O5MTE39ZmZn+vHx
        8et5eXr3xcXG7/Hx8evx8fHr8PDwpgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADx8fFv8vLy6/Ly
        8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvR0dHuTk5O/UJC
        Q/9BQUL/bW1t+T8/Qf24uLjw8vLy6/Ly8uvy8vLr7+/vLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLy
        8sLy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr0dHS7k1N
        Tv1CQkP/QkJE/z8/QP9VVVX80NDQ7vLy8uvy8vLr8vLy6/Ly8uvy8vKKAAAAAAAAAAAAAAAAAAAAAAAA
        AADt7e0c8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy6/Ly8uvy8vLr8vLy69HR
        0e5LS0z9Pz9B/0FBQv8+Pj//fX1+9+rq6uzy8vLr8vLy6/Ly8uvy8vLr8vLy6/Pz888AAAAAAAAAAAAA
        AAAAAAAAAAAAAPHx8Ujz8/Pr8/Pz6/Pz8+vz8/Pr8/Pz6/Pz8+vz8/Pr8/Pz6/Pz8+vz8/Pr8/Pz6/Pz
        8+vS0tLuSUlK/T09Pv8+Pj//QkJD/q+vr/Lz8/Pr8/Pz6/Pz8+vz8/Pr8/Pz6/Pz8+vz8/Pr8/Pz6/Dw
        8BEAAAAAAAAAAAAAAAAAAAAA9fX1ZvT09Ov09PTr9PT06/T09Ov09PTr9PT06/T09Ov09PTr9PT06/T0
        9Ov09PTr09PT7ktLTP08PD3/Ozs8/1tbW/vW1tbu9PT06/T09Ov09PTr9PT06/T09Ov09PTr9PT06/T0
        9Ov09PTr8/PzLAAAAAAAAAAAAAAAAAAAAAD29vZv9fX16/X19ev19fXr9fX16/X19ev19fXr9fX16/X1
        9ev19fXr9fX169XV1e5PT1H9Pj4//zs7PP+Ghob28fHx6/X19ev19fXr9fX16/X19ev19fXr9fX16/X1
        9ev19fXr9fX16/X19ev29vY3AAAAAAAAAAAAAAAAAAAAAPb29mz29vbr9vb26/b29uv29vbr9vb268/P
        z+9ZWVn6ioqL9sDAwPHS0tLvVVVW/URERv9JSUr+uLi48fb29uv29vbr9vb26/b29uv29vbr9vb26/b2
        9uv29vbr9vb26/b29uv29vbr9vb26/T09C8AAAAAAAAAAAAAAAAAAAAA9fX1UPf39+v39/fr9/f36/f3
        9+u1tbXxKyss/i8vL/85OTr/QUFC/0dHSP9ISEn/ampr+uDg4O339/fr9/f36/f39+v39/fr9/f36/f3
        9+v39/fr9/f36/f39+v39/fr9/f36/f39+v39/fr9fX1GQAAAAAAAAAAAAAAAAAAAAD4+Pgn+Pj46/j4
        +Ov4+Pjr+Pj46y0tLv0hISH/dXV293Fxcvg+Pj//RERF/2pqbPv29vbr+Pj46/j4+Ov4+Pjr+Pj46/j4
        +Ov4+Pjr+Pj46/j4+Ov4+Pjr+Pj46/j4+Ov4+Pjr+Pj46/j4+NoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD4+PjY+Pj46/j4+Ov4+PjrRkZG+oyMjPT4+Pjr8fHx7F5eXvs9PT7/Xl5f+/j4+Ov4+Pjr+Pj46/j4
        +Ov4+Pjr+Pj46/j4+Ov4+Pjr+Pj46/j4+Ov4+Pjr+Pj46/j4+Ov4+Pjr+Pj4mAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPn5+YX6+vrr+vr66/r6+uvV1dXu+vr66/r6+uv6+vrr4eHh7To6O/88PD3++vr66/r6
        +uv6+vrr+vr66/r6+uv6+vrr+vr66/r6+uv6+vrr+vr66/r6+uv6+vrr+vr66/r6+uv4+PhLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA9fX1Gfv7++P7+/vr+/v76/v7++v7+/vr+/v76+Tk5O1QUFD7Kioq/zY2
        N/7y8vLs+/v76/v7++v7+/vr+/v76/v7++v7+/vr+/v76/v7++v7+/vr+/v76/v7++v7+/vr+/v7v6qq
        qgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+/v7fPz8/Ov8/Pzr/Pz86/z8/OvX19fuLi4u/Roa
        Gv86Ojv82tra7vz8/Ov8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8
        /Ov7+/tFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADt7e0O+/v7wvz8/Ov8/Pzr/Pz86/z8
        /OvMzMzvjY2N9Orq6uz8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8/Ov8/Pzr/Pz86/z8
        /Ov8/Pzr/Pz8kwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD39/ce/f392P39
        /ev9/f3r/f396/39/ev9/f3r/f396/39/ev9/f3r/f396/39/ev9/f3r/f396/39/ev9/f3r/f396/39
        /ev9/f3r/f396/z8/LbV1dUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD5+fkp/v7+z/7+/uv+/v7r/v7+6/7+/uv+/v7r/v7+6/7+/uv+/v7r/v7+6/7+/uv+/v7r/v7+6/7+
        /uv+/v7r/v7+6/7+/uv+/v6x8PDwEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADz8/MW/v7+rv7+/uv+/v7r/v7+6/7+/uv+/v7r/v7+6/7+/uv+/v7r/v7+6/7+
        /uv+/v7r/v7+6/7+/uv+/v7r/f39gqqqqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////Vv///8f////r////6////+v////r////6///
        /+v////r////6////+v////r////qf///ykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///y////93////tv//
        /7/////r////4P///7z///+r////af///xwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAf/AAAB/wAAAP4AAAD+AAAA/gAAAP4AAAB+AAAA/wAAAf+AAAH/AA
        AA/gAAAP4AAAB+AAAAfAAAAHwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAH4AAAB+AAAAfgAAAH8AAAD/AA
        AB/4AAAf/AAAP/4AAH//gAH//+AH//////8=
</value>
  </data>
</root>